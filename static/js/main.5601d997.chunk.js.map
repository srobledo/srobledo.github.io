{"version":3,"sources":["DropDownSingle.js","DropDownMultiple.js","App.js","serviceWorker.js","index.js"],"names":["DropDownSingle","useState","open","setOpen","option","setOption","drop","useRef","onChangeValue","e","target","value","handleClick","closest","current","className","useEffect","document","addEventListener","removeEventListener","ref","onClick","type","name","checked","onChange","selectedFilters","DropDownMultiple","id","isChecked","disabled","options","setOptions","titleButton","length","toggle","copyOptions","forEach","optionCopy","includes","index","indexOf","splice","push","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5601d997.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nfunction DropDownSingle() {\n  const [open, setOpen] = useState(false);\n  const [option, setOption] = useState('');\n  const drop = useRef(null);\n  const toggle = () => {\n    setOpen(open => !open);\n  };\n  const onChangeValue = (e) => {\n    setOption(e.target.value);\n  };\n  const handleClick = (e) => {\n    if (!e.target.closest(`.${drop.current.className}, .options`) && open) {\n      setOpen(false);\n    }\n  };\n  useEffect(() => {\n    document.addEventListener('click', handleClick);\n    return (() => {\n      document.removeEventListener('click', handleClick);\n    });\n  });\n  return (\n    <div className=\"relative inline-block mr-10\" ref={drop}>\n      <button className={open ? 'button button-active' : 'button'} onClick={toggle}>{`${option || 'Marketplace'}`}</button>\n      {open && (\n        <div className=\"options\">\n          <label>\n            <input \n              type=\"radio\" \n              value=\"Airbnb\" \n              name=\"filter\" \n              checked={option === \"Airbnb\"}\n              onChange={onChangeValue}\n              /> Airbnb\n          </label>\n          <label>\n            <input \n              type=\"radio\" \n              value=\"Vrbo\" \n              name=\"filter\" \n              checked={option === \"Vrbo\"}\n              onChange={onChangeValue}\n            /> Vrbo\n          </label>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default DropDownSingle;\n","import React, { useState, useEffect, useRef } from 'react';\n\nlet selectedFilters = [];\n\nfunction DropDownMultiple() {\n  const [open, setOpen] = useState(false);\n  const [options, setOptions] = useState([\n    {id: 1, value: \"All Arrangement Types\", isChecked: false, disabled: false},\n    {id: 2, value: \"Private Room\", isChecked: false, disabled: false},\n    {id: 3, value: \"Shared Room\", isChecked: false, disabled: false},\n  ]);\n  let titleButton = 'Arrangement Types';\n  if (selectedFilters.length) {\n    titleButton = selectedFilters[0];\n    if (selectedFilters.length > 1) {\n      titleButton = `+${selectedFilters.length - 1} ${selectedFilters[0]}`;\n    }\n  }\n  const drop = useRef(null);\n  const toggle = () => {\n    setOpen(open => !open);\n  };\n  const onChangeValue = (e) => {\n    const copyOptions = [...options];\n    const option = copyOptions[e.target.id];\n    option.isChecked = !option.isChecked;\n\n    // Check if All option is selected\n    if (e.target.id === '0' && option.isChecked) {\n      copyOptions.forEach((optionCopy) => {\n        if (optionCopy.id !== 1) {\n          optionCopy.disabled = true;\n        }\n      });\n    } else {\n      copyOptions.forEach((optionCopy) => {\n        optionCopy.disabled = false;\n      });\n      copyOptions[0].isChecked = false;\n    }\n    if (!selectedFilters.includes(option.value)) {\n      selectedFilters.push(option.value);\n    } else {\n      const index = selectedFilters.indexOf(option.value);\n      if (index !== -1) {\n        selectedFilters.splice(index, 1);\n      }\n    }\n    setOptions(copyOptions);\n  };\n  const handleClick = (e) => {\n    if (!e.target.closest(`.${drop.current.className}, .options`) && open) {\n      setOpen(false);\n    }\n  };\n  useEffect(() => {\n    document.addEventListener('click', handleClick);\n    return (() => {\n      document.removeEventListener('click', handleClick);\n    });\n  });\n  return (\n    <div className=\"relative inline-block\" ref={drop}>\n      <button className={open ? 'button button-active' : 'button'} onClick={toggle}>{titleButton}</button>\n      {open && (\n        <div className=\"options options-multi\">\n          <div className=\"p10\">\n            {options.map((option, index) => {\n              return (\n                <label key={option.id}>\n                  <input\n                    name=\"type\"\n                    type=\"checkbox\"\n                    id={index}\n                    value={option.value}\n                    checked={option.isChecked}\n                    disabled={option.disabled}\n                    onChange={onChangeValue} /> \n                    {option.value}\n                </label>\n              )\n            })}\n          </div>\n          <hr />\n          <div className=\"p5 text-right\">\n            <button className=\"button button-secondary\" onClick={toggle}>Done</button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default DropDownMultiple;\n","import React from 'react';\nimport DropDownSingle from './DropDownSingle';\nimport DropDownMultiple from './DropDownMultiple';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"p10\">\n      <DropDownSingle />\n      <DropDownMultiple />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}